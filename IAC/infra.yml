AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  ProjectName:
    Type: String
    Description: Name of the project
    Default: poc2
  VpcCidr:
    Type: String
    Default: "10.0.0.0/16"
    Description: CIDR block for the VPC
  Subnet1Cidr:
    Type: String
    Default: "10.0.1.0/24"
    Description: CIDR block for the first public subnet
  Subnet2Cidr:
    Type: String
    Default: "10.0.2.0/24"
    Description: CIDR block for the second public subnet
  EKSVersion:
    Type: String
    Description: Kubernetes version to install on EKS cluster
    Default: "1.29"

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: "kubernetes.io/cluster/my-cluster"
          Value: "shared"

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      CidrBlock: !Ref Subnet1Cidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: "kubernetes.io/role/elb"
          Value: "1"

  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      CidrBlock: !Ref Subnet2Cidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: "kubernetes.io/role/elb"
          Value: "1"

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  RouteToInternetGateway:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet1
      RouteTableId: !Ref RouteTable

  Subnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet2
      RouteTableId: !Ref RouteTable

  EKSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable all traffic on EKS cluster
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: "-1"
          CidrIp: "0.0.0.0/0"

  MyRepository: 
    Type: AWS::ECR::Repository
    Properties: 
      RepositoryName: !Sub "${ProjectName}-repository"

  EKSRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub "${ProjectName}EKSRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Sub "${ProjectName}-cluster"
      Version: !Ref EKSVersion
      RoleArn: !GetAtt EKSRole.Arn
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !GetAtt EKSSecurityGroup.GroupId
        SubnetIds:
          - !GetAtt Subnet1.SubnetId
          - !GetAtt Subnet2.SubnetId
  
  EKSNodeGroupRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub "${ProjectName}EKSNodeGroupRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy

  EKSNodegroup:
    Type: 'AWS::EKS::Nodegroup'
    Properties:
      ClusterName: !Ref EKSCluster
      NodegroupName: !Sub "${ProjectName}-cluster-managed-node-group"
      NodeRole: !GetAtt EKSNodeGroupRole.Arn
      ScalingConfig:
        MinSize: 1
        DesiredSize: 1
        MaxSize: 2
      Subnets:
        - !GetAtt Subnet1.SubnetId
        - !GetAtt Subnet2.SubnetId
      # instanceTypes: 
      #   - t3.medium